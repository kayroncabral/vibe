extend type Query {
  doctors: [Doctor!]!
}

extend type Mutation {
  createDoctor(input: CreateDoctorInput!): Doctor!
}

input CreateDoctorInput {
  name: String!
  sex: Sex!
  birthday: Date!
  crm: String!
  specializations: [SpecializationInput!]!
}

input SpecializationInput {
  name: String!
  subspecializations: [SubspecializationInput!]!
}

input SubspecializationInput {
  name: String!
}

type Doctor implements User & Node {
  id: ID!
  name: String!
  sex: Sex!
  birthday: String!
  role: String!
  crm: String!
  specializations: [Specialization!]!
  schedules: [Schedule!]!
}

type Specialization {
  name: String!
  subspecializations: [Subspecialization!]!
}

type Subspecialization {
  name: String!
}
