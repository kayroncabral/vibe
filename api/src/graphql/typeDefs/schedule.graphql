extend type Query {
  schedules(input: SchedulesInput): [Schedule!]!
}

extend type Mutation {
  createSchedules(input: CreateSchedulesInput!): [Schedule!]! @isAuthenticated(requires: DOCTOR)

  schedule(input: ScheduleInput!): Schedule! @isAuthenticated(requires: PATIENT)
  missingPatient(input: MissingPatientInput!): Schedule! @isAuthenticated(requires: DOCTOR)
  cancelSchedule(input: CancelScheduleInput!): Schedule! @isAuthenticated(requires: PATIENT)
}

input SchedulesFilterInput {
  name: String
  start: Date
  end: Date
  status: ScheduleStatus
}

input CreateSchedulesInput {
  doctor: ID!
  dates: [Date!]!
}

input SchedulesInput {
  filter: SchedulesFilterInput
}

input ScheduleInput {
  schedule: ID!
}

input MissingPatientInput {
  schedule: ID!
}

input CancelScheduleInput {
  schedule: ID!
}

type Schedule implements Node {
  id: ID!
  doctor: Doctor!
  patient(name: String): Patient
  appointment: Appointment
  date: Date!
  status: ScheduleStatus
  scheduledAt: Date
  canceledAt: Date
}

enum ScheduleStatus {
  AVAILABLE
  BOOKED
  CANCELED
  APPOINTMENT_DONE
  MISSED
}
